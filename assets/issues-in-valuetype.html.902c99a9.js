import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{d as s}from"./app.70fbd393.js";const a={},p=s(`<h1 id="in\u591A\u5217\u67E5\u8BE2-\u8868\u8FBE\u5F0F\u81EA\u5B9A\u4E49\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#in\u591A\u5217\u67E5\u8BE2-\u8868\u8FBE\u5F0F\u81EA\u5B9A\u4E49\u5B9E\u73B0" aria-hidden="true">#</a> In\u591A\u5217\u67E5\u8BE2\uFF0C\u8868\u8FBE\u5F0F\u81EA\u5B9A\u4E49\u5B9E\u73B0</h1><p>FreeSql \u57FA\u7840\u5E93\u4E3A\u4E86\u4E0D\u4F9D\u8D56 System.ValueType.dll\uFF0C\u6240\u4EE5\u5C06\u4EE5\u4E0B\u4EE3\u7801\u62BD\u79BB\u4E86\u51FA\u6765\u3002</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">//\u5143\u7EC4\u96C6\u5408</span>
<span class="token class-name">vae</span> lst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token punctuation">(</span>Guid<span class="token punctuation">,</span> DateTime<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lst<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lst<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> t2 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> lst<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> a<span class="token punctuation">.</span>ct1<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT .. FROM ..</span>
<span class="token comment">//WHERE (a.&quot;Id&quot; = &#39;685ee1f6-bdf6-4719-a291-c709b8a1378f&#39; AND a.&quot;ct1&quot; = &#39;2019-12-07 23:55:27&#39; OR </span>
<span class="token comment">//a.&quot;Id&quot; = &#39;5ecd838a-06a0-4c81-be43-1e77633b7404&#39; AND a.&quot;ct1&quot; = &#39;2019-12-07 23:55:27&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u4EE3\u7801\u5B9E\u73B0\uFF1A</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">FreeSql<span class="token punctuation">.</span>DataAnnotations</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ExpressionCall</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFreeSqlExpressionCall</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal<span class="token punctuation">&lt;</span>ExpressionCallContext<span class="token punctuation">&gt;</span></span> expContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadLocal<span class="token punctuation">&lt;</span>ExpressionCallContext<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// C#\uFF1A\u4ECE\u5143\u7EC4\u96C6\u5408\u4E2D\u67E5\u627E exp1, exp2 \u662F\u5426\u5B58\u5728<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// SQL\uFF1A <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// exp1 = that[0].Item1 and exp2 = that[0].Item2 OR <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// exp1 = that[1].Item1 and exp2 = that[1].Item2 OR <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// \u6CE8\u610F\uFF1A\u5F53 that \u4E3A null \u6216 empty \u65F6\uFF0C\u8FD4\u56DE 1=0 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Oracle\uFF1A (Id, Name) IN ((1, &quot;name1&quot;), (2, &quot;name2&quot;))</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>that<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exp1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exp2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">Contains</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RawValue</span></span><span class="token punctuation">]</span> <span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span> that<span class="token punctuation">,</span> <span class="token class-name">T1</span> exp1<span class="token punctuation">,</span> <span class="token class-name">T2</span> exp2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>expContext<span class="token punctuation">.</span>IsValueCreated <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">||</span> expContext<span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>ParsedContent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> that<span class="token punctuation">?.</span><span class="token function">Any</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Item1<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>exp1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>Item2<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>exp2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">?.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token string">&quot;1=0&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>DataType <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">case</span> FreeSql<span class="token punctuation">.</span>DataType<span class="token punctuation">.</span>Oracle<span class="token punctuation">:</span>
            <span class="token keyword">case</span> FreeSql<span class="token punctuation">.</span>DataType<span class="token punctuation">.</span>OdbcOracle<span class="token punctuation">:</span>
                sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>ParsedContent<span class="token punctuation">[</span><span class="token string">&quot;exp1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>ParsedContent<span class="token punctuation">[</span><span class="token string">&quot;exp2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;) IN (&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> that<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx<span class="token operator">++</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">FormatSql</span><span class="token punctuation">(</span>FreeSql<span class="token punctuation">.</span>Internal<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span><span class="token function">GetDataReaderValue</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Item1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">FormatSql</span><span class="token punctuation">(</span>FreeSql<span class="token punctuation">.</span>Internal<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span><span class="token function">GetDataReaderValue</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Item2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> that<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>idx<span class="token operator">++</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot; OR \\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sb
                <span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>ParsedContent<span class="token punctuation">[</span><span class="token string">&quot;exp1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot; = &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">FormatSql</span><span class="token punctuation">(</span>FreeSql<span class="token punctuation">.</span>Internal<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span><span class="token function">GetDataReaderValue</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Item1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot; AND &quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>ParsedContent<span class="token punctuation">[</span><span class="token string">&quot;exp2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot; = &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">FormatSql</span><span class="token punctuation">(</span>FreeSql<span class="token punctuation">.</span>Internal<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span><span class="token function">GetDataReaderValue</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Item2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        expContext<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br></div></div>`,5);function t(o,e){return p}var l=n(a,[["render",t],["__file","issues-in-valuetype.html.vue"]]);export{l as default};
