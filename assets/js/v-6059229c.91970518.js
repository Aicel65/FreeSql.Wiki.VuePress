"use strict";(self.webpackChunkFreeSql_Wiki_VuePress=self.webpackChunkFreeSql_Wiki_VuePress||[]).push([[7e3],{9547:(n,t,s)=>{s.r(t),s.d(t,{data:()=>a});const a={key:"v-6059229c",path:"/reference/vs-dapper.html",title:"与 Dapper 比较",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"关于性能（输了）",slug:"关于性能-输了",children:[]},{level:2,title:"关于功能（赢了）",slug:"关于功能-赢了",children:[]},{level:2,title:"如何接入（老项目）",slug:"如何接入-老项目",children:[]},{level:2,title:"学习指南",slug:"学习指南",children:[]}],filePathRelative:"reference/vs-dapper.md",git:{updatedTime:1637547245e3,contributors:[{name:"IGeekFan",email:"luoyunchong@foxmail.com",commits:1}]}}},3712:(n,t,s)=>{s.r(t),s.d(t,{default:()=>C});var a=s(6252);const e=(0,a.uE)('<h1 id="与-dapper-比较" tabindex="-1"><a class="header-anchor" href="#与-dapper-比较" aria-hidden="true">#</a> 与 Dapper 比较</h1><p>众所周知 Dapper 是 .NET 下最轻最快的 ORM，它是喜欢写 SQL 码农的福音，相对于 SqlHelper 它更加方便，据统计 10个 .NETer 有 9个 用过 Dapper。</p><p>这篇文章为准备使用 FreeSql 的朋友解惑，对比 Dapper 有何优势，为什么要使用 FreeSql？希望本文内容对大家有所帮助。</p><h2 id="关于性能-输了" tabindex="-1"><a class="header-anchor" href="#关于性能-输了" aria-hidden="true">#</a> 关于性能（输了）</h2><p>Dapper + SQL 是大家一般所用的方式，性能对比主要体现在两个阶段：</p><p>1、执行前，表达式树解析，拼接 SQL 的消耗：</p><ul><li>Dapper 几乎没有消耗；</li><li>FreeSql 会存在递归解析、对象拆箱等操作；</li></ul><p>从项目工程可维护性角度看，这一点性能损失是能被容忍的，请看下面的测试结果。</p><p>2、执行后，返回数据转换为 List：</p><ul><li>Dapper 采用 Emit 构造委托并缓存，性能接近原生代码；</li><li>FreeSql 采用 ExpressionTree 构造委托并缓存，为了映射类型更加易用使用了一点装箱操作，性能比 Dapper 略低；</li></ul><table><thead><tr><th>Method</th><th>size</th><th style="text-align:right;">Mean</th><th style="text-align:right;">Error</th><th style="text-align:right;">StdDev</th><th style="text-align:right;">Median</th><th style="text-align:right;">Rank</th></tr></thead><tbody><tr><td>FreeSqlSelect</td><td>1</td><td style="text-align:right;">512.1 us</td><td style="text-align:right;">25.99 us</td><td style="text-align:right;">75.82 us</td><td style="text-align:right;">519.6 us</td><td style="text-align:right;">3</td></tr><tr><td>SqlSugarSelect</td><td>1</td><td style="text-align:right;">438.6 us</td><td style="text-align:right;">27.87 us</td><td style="text-align:right;">81.75 us</td><td style="text-align:right;">428.1 us</td><td style="text-align:right;">2</td></tr><tr><td>EfCoreSelect</td><td>1</td><td style="text-align:right;">594.3 us</td><td style="text-align:right;">36.51 us</td><td style="text-align:right;">107.08 us</td><td style="text-align:right;">593.9 us</td><td style="text-align:right;">4</td></tr><tr><td>DapperSelete</td><td>1</td><td style="text-align:right;">287.5 us</td><td style="text-align:right;">22.10 us</td><td style="text-align:right;">63.77 us</td><td style="text-align:right;">281.7 us</td><td style="text-align:right;">1</td></tr><tr><td>FreeSqlSelect</td><td>500</td><td style="text-align:right;">1,022.0 us</td><td style="text-align:right;">72.17 us</td><td style="text-align:right;">212.79 us</td><td style="text-align:right;">957.0 us</td><td style="text-align:right;">6</td></tr><tr><td>SqlSugarSelect</td><td>500</td><td style="text-align:right;">1,338.1 us</td><td style="text-align:right;">90.51 us</td><td style="text-align:right;">261.15 us</td><td style="text-align:right;">1,311.5 us</td><td style="text-align:right;">7</td></tr><tr><td>EfCoreSelect</td><td>500</td><td style="text-align:right;">1,390.0 us</td><td style="text-align:right;">101.53 us</td><td style="text-align:right;">296.18 us</td><td style="text-align:right;">1,319.8 us</td><td style="text-align:right;">7</td></tr><tr><td>DapperSelete</td><td>500</td><td style="text-align:right;">919.0 us</td><td style="text-align:right;">48.37 us</td><td style="text-align:right;">139.55 us</td><td style="text-align:right;">891.0 us</td><td style="text-align:right;">5</td></tr></tbody></table><blockquote><p>如上测试 Top1、Top500 单表查询水平结果</p></blockquote><blockquote><p>测试注意 IFreeSql 是单例模式设计，请勿重复创建，测试前请预热</p></blockquote><p>测试结果是 us 级别的慢，能接受，因为数据库的上限并发瓶颈比较低（几万的水平），应用程序中的这一点消耗远不是问题。</p><p>最怕方法或设计错了导致的慢，那慢就是秒级以上的慢了，无力回天。</p><h2 id="关于功能-赢了" tabindex="-1"><a class="header-anchor" href="#关于功能-赢了" aria-hidden="true">#</a> 关于功能（赢了）</h2><p>Dapper 几乎只有执行 SQL 的功能，市面上有一些基于 Dapper 做的轻量级 ORM，可以对实体对象进行 CRUD 操作，支持的数据库有限。</p><p>Dapper 在功能方面几乎完败于 FreeSql，例如：</p><ul><li>CodeFirst：Dapper 不支持；</li><li>类型映射：Dapper 在不同数据库之间的类型映射容易报错。比如实体类属性是 string，但是数据库类型是 int，非常容易报错，这不是杠，真实项目中有很多非等映射类型存在；</li><li>表达式树：Dapper 不支持导航属性、自定义解析、以及特别的解析；</li><li>导航属性：Dapper 不支持；</li><li>批量插入：Dapper 需要自己写 SQL 或者引入第三方包，FreeSql 自带集成；</li><li>批量更新：Dapper 需要自己写 SQL，FreeSql 自带集成；</li><li>工作单元：Dapper 需要引入第三方包，FreeSql 自带集成；</li><li>读写分离：？？</li><li>全局过滤：？？</li></ul><p>等等。。。</p><p>FreeSql 赢在功能丰富，给使用者提供最大便利，你准备好入坑了吗？</p><h2 id="如何接入-老项目" tabindex="-1"><a class="header-anchor" href="#如何接入-老项目" aria-hidden="true">#</a> 如何接入（老项目）</h2><p>如果你的项目正在使用 Dapper，请看以下成本最低的接入方法。</p><p>FreeSql 支持调用 SQL/存储过程，同时也为 IDbConnection/IDbTransaction 提供扩展方法 Select/Delete/Insert/Update/InsertOrUpdate。</p><p>第一步：以数据库 SqlServer 访问为例，只需要安装已经划分好的小包：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet <span class="token function">add</span> packages FreeSql.Provider.SqlServer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>or</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Install-Package FreeSql.Provider.SqlServer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>第二步：建立实体类</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class TestConnectionExt <span class="token punctuation">{</span>\n    public Guid id <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    public string title <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    public DateTime createTime <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>第三步：开始 CRUD</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">using</span> <span class="token punctuation">(</span>var conn <span class="token operator">=</span> new <span class="token function">SqlConnection</span><span class="token punctuation">(</span>connectString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    var list <span class="token operator">=</span> conn<span class="token punctuation">.</span>Select<span class="token operator">&lt;</span>TestConnectionExt<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>id <span class="token operator">==</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">using</span> <span class="token punctuation">(</span>var conn <span class="token operator">=</span> new <span class="token function">SqlConnection</span><span class="token punctuation">(</span>connectString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    var item <span class="token operator">=</span> new TestConnectionExt <span class="token punctuation">{</span> title <span class="token operator">=</span> <span class="token string">&quot;testinsert&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    var affrows <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">using</span> <span class="token punctuation">(</span>var conn <span class="token operator">=</span> new <span class="token function">SqlConnection</span><span class="token punctuation">(</span>connectString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    var affrows <span class="token operator">=</span> conn<span class="token punctuation">.</span>Update<span class="token operator">&lt;</span>TestConnectionExt<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> xxx<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>a <span class="token operator">=</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">&quot;testupdated&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">using</span> <span class="token punctuation">(</span>var conn <span class="token operator">=</span> new <span class="token function">SqlConnection</span><span class="token punctuation">(</span>connectString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    var affrows <span class="token operator">=</span> conn<span class="token punctuation">.</span>Delete<span class="token operator">&lt;</span>TestConnectionExt<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> xxx<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>添加或更新：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">using</span> <span class="token punctuation">(</span>var conn <span class="token operator">=</span> new <span class="token function">SqlConnection</span><span class="token punctuation">(</span>connectString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    var affrows <span class="token operator">=</span> conn<span class="token punctuation">.</span>InsertOrUpdate<span class="token operator">&lt;</span>TestConnectionExt<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">SetSource</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如上添加、删除、修改、查询，已经支持实体类操作，并且支持批量插入、批量更新、批量删除、多表查询、导航属性查询。</p><p>可以享用 FreeSql 几乎所有功能。</p><p>思考：使用这种 API 貌似可以很轻松的接入到 abp vnext 中？</p><h2 id="学习指南" tabindex="-1"><a class="header-anchor" href="#学习指南" aria-hidden="true">#</a> 学习指南</h2><p>FreeSql 是一款功能强大的对象关系映射（O/RM）组件，支持 .NET Core 2.1+、.NET Framework 4.0+ 以及 Xamarin。</p><ul><li>🛠 支持 CodeFirst 模式，即便使用 Access 数据库也支持数据迁移；</li><li>💻 支持 DbFirst 模式，支持从数据库导入实体类，或使用实体类生成工具生成实体类；</li><li>⛳ 支持 深入的类型映射，比如 PgSql 的数组类型等；</li><li>✒ 支持 丰富的表达式函数，以及灵活的自定义解析；</li><li>🏁 支持 导航属性一对多、多对多贪婪加载，以及延时加载；</li><li>📃 支持 读写分离、分表分库、过滤器、乐观锁、悲观锁；</li><li>🌳 支持 MySql/SqlServer/PostgreSQL/Oracle/Sqlite/Firebird/达梦/人大金仓/神舟通用/南大通用/翰高/Access 等数据库；</li></ul><h4 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h4>',41),p=(0,a.Uk)("《学习FreeSql之一：添加数据》"),l=(0,a.Uk)("《学习FreeSql之二：删除数据》"),o=(0,a.Uk)("《学习FreeSql之三：修改数据》"),i=(0,a.Uk)("《学习FreeSql之四：查询数据》"),c=(0,a.Uk)("《仓储层Repository》"),u=(0,a._)("h4",{id:"进阶",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#进阶","aria-hidden":"true"},"#"),(0,a.Uk)(" 进阶")],-1),r=(0,a.Uk)("《CodeFirst模式开发介绍》"),d=(0,a.Uk)("《CodeFirst模式之一：实体特性》"),k=(0,a.Uk)("《CodeFirst模式之二：FluentApi》"),g=(0,a.Uk)("《CodeFirst模式之三：自定义特性》"),h=(0,a.Uk)("《CodeFirst模式之四：类型映射》"),m=(0,a.Uk)("《CodeFirst模式之五：迁移结构》"),b=(0,a.Uk)("《DbFirst模式开发介绍》"),f=(0,a._)("h4",{id:"高级",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#高级","aria-hidden":"true"},"#"),(0,a.Uk)(" 高级")],-1),x=(0,a.Uk)("《数据库事务》"),S=(0,a.Uk)("《使用读写分离》"),_=(0,a.Uk)("《分表分库》"),y=(0,a.Uk)("《多租户》"),v=(0,a.Uk)("《返回数据》"),q=(0,a.Uk)("《优化之：延时加载》"),w=(0,a.Uk)("《优化之：贪婪加载》"),F=(0,a.Uk)("《Expression 表达式函数》"),D=(0,a.Uk)("《AOP》"),U={},C=(0,s(3744).Z)(U,[["render",function(n,t){const s=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[e,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/insert.html"},{default:(0,a.w5)((()=>[p])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/delete.html"},{default:(0,a.w5)((()=>[l])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/update.html"},{default:(0,a.w5)((()=>[o])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/select.html"},{default:(0,a.w5)((()=>[i])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/repository.html"},{default:(0,a.w5)((()=>[c])),_:1})])]),u,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/code-first.html"},{default:(0,a.w5)((()=>[r])),_:1}),(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/entity-attribute.html"},{default:(0,a.w5)((()=>[d])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/fluent-api.html"},{default:(0,a.w5)((()=>[k])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/custom-attribute.html"},{default:(0,a.w5)((()=>[g])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/type-mapping.html"},{default:(0,a.w5)((()=>[h])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/code-first.html#%E8%BF%81%E7%A7%BB%E7%BB%93%E6%9E%84"},{default:(0,a.w5)((()=>[m])),_:1})])])])]),(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/db-first.html"},{default:(0,a.w5)((()=>[b])),_:1})])]),f,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/transaction.html"},{default:(0,a.w5)((()=>[x])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/read-write-splitting.html"},{default:(0,a.w5)((()=>[S])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/sharding.html"},{default:(0,a.w5)((()=>[_])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/multi-tenancy.html"},{default:(0,a.w5)((()=>[y])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/select-return-data.html"},{default:(0,a.w5)((()=>[v])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/select-lazy-loading.html"},{default:(0,a.w5)((()=>[q])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/select-include.html"},{default:(0,a.w5)((()=>[w])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/expression-function.html"},{default:(0,a.w5)((()=>[F])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(s,{to:"/guide/aop.html"},{default:(0,a.w5)((()=>[D])),_:1})])])],64)}]])},3744:(n,t)=>{t.Z=(n,t)=>{const s=n.__vccOpts||n;for(const[n,a]of t)s[n]=a;return s}}}]);