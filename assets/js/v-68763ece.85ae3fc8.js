"use strict";(self.webpackChunkFreeSql_Wiki_VuePress=self.webpackChunkFreeSql_Wiki_VuePress||[]).push([[4186],{2315:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-68763ece",path:"/guide/ado.html",title:"ADO",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"查询 SQL 返回实体",slug:"查询-sql-返回实体",children:[]},{level:2,title:"参数化",slug:"参数化",children:[]},{level:2,title:"检测连接",slug:"检测连接",children:[]},{level:2,title:"CommandFluent",slug:"commandfluent",children:[]},{level:2,title:"Ado.net 扩展方法",slug:"ado-net-扩展方法",children:[]}],git:{updatedTime:1651030409e3,contributors:[{name:"luoyunchong",email:"luoyunchong@foxmai.com",commits:1}]},filePathRelative:"guide/ado.md"}},4205:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="ado" tabindex="-1"><a class="header-anchor" href="#ado" aria-hidden="true">#</a> ADO</h1><p>Ado 是 IFreeSql 下重要的对象之一，它包括所有对 SQL 操作的封装，提供 ExecuteReader、ExecuteDataSet、ExecuteDataTable、ExecuteNonQuery、ExecuteScalar 等方法，使用起来和传统 SqlHelper 一样。</p><h2 id="查询-sql-返回实体" tabindex="-1"><a class="header-anchor" href="#查询-sql-返回实体" aria-hidden="true">#</a> 查询 SQL 返回实体</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//返回多条记录</span>\nList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span>Query<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;select * from t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//返回单条记录</span>\nT item <span class="token operator">=</span> fsql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span>QuerySingle<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;select * from t1 where id = @id&quot;</span><span class="token punctuation">,</span> new <span class="token punctuation">{</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//返回多个结果集</span>\nvar result <span class="token operator">=</span> fsql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span>Query<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;select * from t1; select * from t2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nList<span class="token operator">&lt;</span>T1<span class="token operator">&gt;</span> list1 <span class="token operator">=</span> result<span class="token punctuation">.</span>Item1<span class="token punctuation">;</span>\nList<span class="token operator">&lt;</span>T2<span class="token operator">&gt;</span> list2 <span class="token operator">=</span> result<span class="token punctuation">.</span>Item2<span class="token punctuation">;</span>\n\n<span class="token comment">// like 查询 </span>\nstring searchText <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>\nList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> users <span class="token operator">=</span> _fsql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span>Query<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;select * from t1 where name like @name&quot;</span><span class="token punctuation">,</span> new <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token string">&quot;%&quot;</span> <span class="token operator">+</span> searchText <span class="token operator">+</span> <span class="token string">&quot;%&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="参数化" tabindex="-1"><a class="header-anchor" href="#参数化" aria-hidden="true">#</a> 参数化</h2><p>Ado 下面所有参数 object parms 都可以接受匿名对象，或者字典：</p><ul><li>new { id = 1, name = &quot;xx&quot; }</li><li>new Dictionary&lt;string, object&gt; { [&quot;id&quot;] = 1, [&quot;name&quot;] = &quot;xx&quot; }</li></ul><p>关于参数前缀：</p><ul><li>odbc 是 ? 并且没有标识，所以freesql禁用了 odbc 参数化</li><li>oracle 是 :</li><li>mysql.data 是 ?</li><li>mysqlconnector 是 @</li><li>其他基本都是 @</li></ul><p>IN 参数化查询：</p><blockquote><p>当前仅支持Array和IList类型绑定</p></blockquote><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>var ids <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span>Query<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;select * from t1 where id in @ids&quot;</span><span class="token punctuation">,</span> new <span class="token punctuation">{</span> ids <span class="token operator">=</span> ids <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="检测连接" tabindex="-1"><a class="header-anchor" href="#检测连接" aria-hidden="true">#</a> 检测连接</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>bool isok <span class="token operator">=</span> fsql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span><span class="token function">ExecuteConnectTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="commandfluent" tabindex="-1"><a class="header-anchor" href="#commandfluent" aria-hidden="true">#</a> CommandFluent</h2><p>fsql.Ado 重载方法太多的情况下，建议使用 CommandFluent，例如存储过程：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>DbParameter p2 <span class="token operator">=</span> null<span class="token punctuation">;</span>\nfsql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span><span class="token function">CommandFluent</span><span class="token punctuation">(</span><span class="token string">&quot;dbo.GetICMaxNum&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">CommandType</span><span class="token punctuation">(</span>CommandType<span class="token punctuation">.</span>StoredProcedure<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">CommandTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>\n\n    <span class="token punctuation">.</span><span class="token function">WithParameter</span><span class="token punctuation">(</span><span class="token string">&quot;TableName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tb1&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">WithParameter</span><span class="token punctuation">(</span><span class="token string">&quot;FInterID&quot;</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> p <span class="token operator">=</span><span class="token operator">&gt;</span>\n    <span class="token punctuation">{</span>\n        p2 <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">//Output 参数</span>\n        p<span class="token punctuation">.</span>DbType <span class="token operator">=</span> DbType<span class="token punctuation">.</span>Int32<span class="token punctuation">;</span>\n        p<span class="token punctuation">.</span>Direction <span class="token operator">=</span> ParameterDirection<span class="token punctuation">.</span>Output<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//.Query&lt;T&gt;() 或者 .ExecuteDataTable() 或者 ...</span>\n\nConsole<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="ado-net-扩展方法" tabindex="-1"><a class="header-anchor" href="#ado-net-扩展方法" aria-hidden="true">#</a> Ado.net 扩展方法</h2><p>提供了类似 Dapper 的使用方法，FreeSql 增加了 IDbConnection/IDbTransaction 对象的扩展方法 Select/Insert/Update/Delete 实现 CRUD。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">FreeSql</span><span class="token punctuation">;</span>\n\n<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">//IFreeSql fsql = conn.GetIFreeSql();</span>\n  <span class="token comment">//fsql.CodeFirst.IsNoneCommandParameter = true;</span>\n  <span class="token comment">//fsql.CodeFirst.IsSyncStructureToUpper = true;</span>\n  <span class="token comment">//fsql.Aop.CommandBefore += (_, e) =&gt; Trace.WriteLine(e.Command.CommandText);</span>\n  <span class="token comment">//以上整个程序只需要设置一次</span>\n\n  conn<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  conn<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  conn<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  conn<span class="token punctuation">.</span><span class="token function">InsertOrUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  conn<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Delete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>每个 SqlConnection GetFreeSql() 返回的 IFreeSql 实例相同；</li><li>可以对 fsql 设置 Aop 事件，比如监视 SQL；</li><li>IFreeSql 自身的成员 IDbFirst、Transaction 不可用；</li></ul><p>利用本功能可以快速将 FreeSql 使用到项目中，只需要处理好实体类的特性。</p><p>提示：FreeSql 兼容 EFCore 99% 的实体特性</p>',23),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);